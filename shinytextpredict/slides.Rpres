Text Prediction Web App
========================================================
type: section
author: by Herchu

## Unmatched user experience!

## Highly accurate and blazing-fast!

Sleek design. Shows or hides profanity.

*Works in all modern (JavaScript enabled) browsers. Responsiveness
guaranteed: tested in an iPad and an iPhone.*

Using the application
========================================================
type: section

![app main screen capture](www/usage.png)




Internal Model
========================================================
type: section

4-gram Model with Linear Interpolation Smoothing

$$ \begin{align*}
P(w_n|w_{n-1},\dotsc,w_{n-3}) = & \lambda_0 P(w_n) +
\lambda_1 P(w_n|w_{n-1}) + \dotsc + \\
& \lambda_3 P(w_n|w_{n-1},\dotsc,w_{n-3})
\end{align*} $$

*30,000* words dictionary, 2, to 4 ngram tables with *1,000,000* entries each
(*MLE probabilities*).

n-grams tuples include begin-of-sentence tokens.

The app achieves ~~16% accuracy~~ for the first word and ~~26%~~
within the best three. *Independently scored by
third-party
[benchmark.R](https://github.com/jan-san/dsci-benchmark)*


Implementation
=======================================================
type: section

Web app hosted in [shinyapps.io](http://shinyapps.io) (developed in R)

Words in the ngram tables are integer coded: less char strings
results in a ~~50MB~~ total memory footprint.

One (~~fast!~~) line get to the best candidate:

    head(order(rowSums(sweep(ngrams,2,weights,`*`)),decreasing=T),n=1)

Weights (lambdas) were obtained by eyeball. Couldn't get better values
through optimization
([COBYLA](http://en.wikipedia.org/wiki/COBYLA)).




Try it!
=======================================================
type: section


Includes two optional extra features:
- Predicts the obligatory word plus ~~two more~~ words
- PAT Phrase-auto-typing &trade; ;-)

## https://herchu.shinyapps.io/shinytextpredict




